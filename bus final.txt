import sqlite3
conn = sqlite3.connect('databaseforbus.db')
cursor = conn.cursor()
travel_time = 60
path1 = ['A', 'B', 'C']
path2 = ['C', 'B', 'A']
count = 0
i = 0
distance=10
number_of_passenger1=0
number_of_passenger2=0
total_count=0

def board(bus_id, passenger_id, arrival_time, bus_departure):
    arrival_time = arrival_time + 2
    cursor.execute("UPDATE  passenger set bus_departure=?,flag=?,bus_id=? where pid=? ",
                   (bus_departure, 1, bus_id, passenger_id))
    conn.commit()
    return arrival_time


def deboard(bus_id, passenger_id, arrival_time):
    global count
    global number_of_passenger
    cursor.execute("UPDATE  passenger set departure_time=?,flag=? where pid=?", (arrival_time, 0, passenger_id))
    arrival_time = arrival_time + 2
    conn.commit()
    count = count + 1

    return arrival_time


def bus1function(bus_id, present_stop_bus, arrival_time, i):
    global number_of_passenger1
    bus_departure = arrival_time
    cursor.execute(
        "SELECT * FROM passenger  WHERE flag=? and departure_time=? and destination_stop=? and bus_id=?",
        (1, 0, present_stop_bus, bus_id))
    passenger_to_update_at_a = cursor.fetchall()
    bus_departure = bus_departure + 2 * (len(passenger_to_update_at_a))
    for p in passenger_to_update_at_a:
        passenger_id, _, _, _, _, _, _, _ = p
        arrival_time = deboard(bus_id, passenger_id, arrival_time)
        number_of_passenger1=number_of_passenger1-1

    cursor.execute(
        "SELECT * FROM passenger  WHERE flag=? and departure_time=? and bus_departure=? and arrival_stop=? and arrival_time<=?",
        (0, 0, 0, present_stop_bus, arrival_time))
    passenger_to_update_at_a = cursor.fetchall()

    for p in passenger_to_update_at_a:
        passenger_id, _, dest, _, _, _, _, _ = p
        if (path1[(i + 1) % 3] == dest):
            bus_departure = bus_departure + 2
    for p in passenger_to_update_at_a:
        passenger_id, _, dest, _, _, _, _, _ = p
        if (path1[(i + 1) % 3] == dest):
            arrival_time = board(bus_id, passenger_id, arrival_time, bus_departure)
            number_of_passenger1=number_of_passenger1+1
    bus_departure = bus_departure + travel_time
    cursor.execute("UPDATE  bus set time=?, current_stop=?,destination_stop=? where id=?",
                   (bus_departure, path1[(i + 1) % 3], path1[(i + 2) % 3], bus_id))
    conn.commit()


def bus2function(bus_id, present_stop_bus, arrival_time, i):
    global number_of_passenger2
    bus_departure = arrival_time
    cursor.execute(
        "SELECT * FROM passenger  WHERE flag=? and departure_time=? and destination_stop=? and bus_id=?",
        (1, 0, present_stop_bus, bus_id))
    passenger_to_update_at_a = cursor.fetchall()

    print(len(passenger_to_update_at_a))
    bus_departure = bus_departure + 2 * (len(passenger_to_update_at_a))

    for p in passenger_to_update_at_a:
        passenger_id, _, _, _, _, _, _, _ = p
        arrival_time = deboard(bus_id, passenger_id, arrival_time)
        number_of_passenger2=number_of_passenger2-1

    cursor.execute(
        "SELECT * FROM passenger  WHERE flag=? and departure_time=? and bus_departure=? and arrival_stop=? and arrival_time<=?",
        (0, 0, 0, present_stop_bus, arrival_time))
    passenger_to_update_at_a = cursor.fetchall()


    for p in passenger_to_update_at_a:
        passenger_id, _, dest, _, _, _, _, _ = p
        if (path2[(i + 1) % 3] == dest):
            bus_departure = bus_departure + 2

    for p in passenger_to_update_at_a:
        passenger_id, _, dest, _, _, _, _, _ = p
        if (path2[(i + 1) % 3] == dest):
            arrival_time = board(bus_id, passenger_id, arrival_time, bus_departure)
            number_of_passenger2 = number_of_passenger2 + 1

    bus_departure = bus_departure + travel_time
    cursor.execute("UPDATE  bus set time=?, current_stop=?,destination_stop=? where id=?",
                   (bus_departure, path2[(i + 1) % 3], path2[(i + 2) % 3], bus_id))
    conn.commit()


while (count < 900):
    cursor.execute("SELECT * FROM bus ORDER BY time")
    b = cursor.fetchall()
    bus1 = b[0]
    bus2 = b[1]
    print(bus1)
    print(bus2)

    bus_id1, _, dest, current_time1, distance1 = bus1
    bus_id2, _, dest, current_time2, distance2 = bus2

    if (int(bus_id1) < int(bus_id2)):
        distance1 = distance1 + distance
        distance2 = distance2 + distance
        present_stop_bus1 = path1[i % 3]
        present_stop_bus2 = path2[i % 3]

        cursor.execute("UPDATE  bus set distance=? where id=?", (distance1, bus_id1))
        cursor.execute("UPDATE  bus set distance=? where id=?", (distance2, bus_id2))
        bus1function(bus_id1, present_stop_bus1, current_time1, i)
        bus2function(bus_id2, present_stop_bus2, current_time2, i)


    else:
        distance2 = distance2 + distance
        distance1 = distance1 + distance
        present_stop_bus1 = path2[i % 3]
        present_stop_bus2 = path1[i % 3]
        bus2function(bus_id1, present_stop_bus1, current_time1, i)
        bus1function(bus_id2, present_stop_bus2, current_time2, i)

        cursor.execute("UPDATE  bus set distance=? where id=?", (distance1, bus_id1))
        cursor.execute("UPDATE  bus set distance=? where id=?", (distance2, bus_id2))

    total_count=number_of_passenger1+number_of_passenger2+total_count
    print(f"Number of passengers in the trip in bus1---{number_of_passenger1}")
    print(f"Number of passengers in the trip in bus2---{number_of_passenger2}")


    i = i + 1
print(total_count)









