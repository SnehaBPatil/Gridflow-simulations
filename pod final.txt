import threading
import time
import random
from datetime import datetime
import sqlite3
import random
import matplotlib.pyplot as plt
# Connect to SQLite database
conn = sqlite3.connect('newapproach.db')
cursor = conn.cursor()
travel_time=60
distance=10

def pick_at(passenger_id, arrival_time, cstop, dest):
    #minimum at present stop
    pod_pickup=0
    final_time=0
    present_stop_time=0
    other_stop_time=0


    cursor.execute("SELECT * FROM pod WHERE current_stop = ? AND destination_stop = ? "
                   "AND time IN (SELECT MIN(time) FROM pod WHERE current_stop = ? AND destination_stop = ?)",
                   (cstop,cstop,cstop,cstop))
    pod_available_at_present_stop=cursor.fetchall()
    p=cursor.fetchone()


    if(len(pod_available_at_present_stop)!=0):
        pod_available_at_present_stop=pod_available_at_present_stop[0]
        id1,_,_,present_stop_time,distance_at_present_stop=pod_available_at_present_stop
    else:
        present_stop_time=4000000
        id1=0

    pod_available_at_other_stop=check(cstop)
    if(len(pod_available_at_other_stop)!=0):

        pod_available_at_other_stop=pod_available_at_other_stop[0]
        id2,from_stop,_,other_stop_time,distance_at_other_stop=pod_available_at_other_stop
    else:
        other_stop_time=4000000
        id2=0

    board_deboard = 2
    if(other_stop_time+ travel_time +arrival_time>=present_stop_time):
        distance_at_present_stop=distance_at_present_stop+distance
        if(present_stop_time<=arrival_time):
            pod_pickup = arrival_time
            final_time= arrival_time + travel_time + board_deboard

        elif(present_stop_time > arrival_time):
            pod_pickup=present_stop_time
            final_time= present_stop_time + travel_time + board_deboard


        cursor.execute("SELECT * FROM passenger WHERE pod_departure=? and flag=? and arrival_stop=?",(pod_pickup,1,cstop))
        x=cursor.fetchall()
        if(len(x)!=0):
            pod_pickup=pod_pickup+4
            final_time=final_time+4
            print("Executed")
        cursor.execute(
            "UPDATE pod SET time = ?,current_stop=?,destination_stop=? ,distance=? WHERE id = ?", (final_time, dest, dest,distance_at_present_stop,id1))
        conn.commit()
        cursor.execute("UPDATE passenger set departure_time = ?,flag=?,pod_departure=?  WHERE pid = ?",
                       (final_time, 1, pod_pickup, passenger_id))
        conn.commit()

    else:
        distance_at_other_stop=distance_at_other_stop+distance+distance
        if(other_stop_time<=arrival_time):
            final_time= arrival_time + travel_time
            pod_pickup=final_time
            final_time= final_time + board_deboard + travel_time
        else:
            final_time= other_stop_time + travel_time
            pod_pickup = final_time
            final_time= final_time + travel_time + board_deboard


        cursor.execute("SELECT * FROM passenger WHERE pod_departure=? and flag=? and arrival_stop=?",(pod_pickup,1,cstop))
        x=cursor.fetchall()
        if(len(x)!=0):
            pod_pickup=pod_pickup+4
            final_time=final_time+4
            print("Executed")
        cursor.execute(
                "UPDATE pod SET time = ?,current_stop=?,destination_stop=?,distance=? WHERE id = ?", (final_time, dest, dest,distance_at_other_stop,id2))
        cursor.execute("UPDATE passenger set departure_time = ?,flag=?,pod_departure=?,from_stop=?  WHERE pid = ?",
                           (final_time, 1, pod_pickup,from_stop,passenger_id))
        conn.commit()



def check(cstop):

    cursor.execute(
        "SELECT * FROM pod WHERE current_stop != ? AND destination_stop != ? "
        "AND time IN (SELECT MIN(time) FROM pod WHERE current_stop != ? AND destination_stop != ?)",
        (cstop, cstop,cstop,cstop))

    pod_available = cursor.fetchall()

    return pod_available



if __name__ == "__main__":

    count = 1
    flag=0
    while(count!=0):

        cursor.execute("SELECT * FROM passenger  WHERE flag=? and departure_time=? ORDER BY arrival_time", (0, 0))
        passenger_to_update_at_a = cursor.fetchall()
        count=len(passenger_to_update_at_a)

        for p in passenger_to_update_at_a:
            passenger_id, cstop, dest,t,_,_,_,_ = p
            pick_at(passenger_id,t,cstop,dest)
